diff --git a/include/mbedtls/mbedtls_config.h b/include/mbedtls/mbedtls_config.h
index 4292b49..f091918 100644
--- a/include/mbedtls/mbedtls_config.h
+++ b/include/mbedtls/mbedtls_config.h
@@ -185,7 +185,7 @@
  *
  * Enable this layer to allow use of alternative memory allocators.
  */
-//#define MBEDTLS_PLATFORM_MEMORY
+#define MBEDTLS_PLATFORM_MEMORY

 /**
  * \def MBEDTLS_PLATFORM_NO_STD_FUNCTIONS
@@ -1315,7 +1315,7 @@
  *
  * Enable the checkup functions (*_self_test).
  */
-#define MBEDTLS_SELF_TEST
+//#define MBEDTLS_SELF_TEST

 /**
  * \def MBEDTLS_SHA256_SMALLER
diff --git a/library/entropy_poll.c b/library/entropy_poll.c
index b5024c8..d424953 100644
--- a/library/entropy_poll.c
+++ b/library/entropy_poll.c
@@ -41,7 +41,7 @@
 
 #if !defined(unix) && !defined(__unix__) && !defined(__unix) && \
     !defined(__APPLE__) && !defined(_WIN32) && !defined(__QNXNTO__) && \
-    !defined(__HAIKU__) && !defined(__midipix__)
+    !defined(__HAIKU__) && !defined(__midipix__) && !defined(__vita__)
 #error \
     "Platform entropy sources only work on Unix and Windows, see MBEDTLS_NO_PLATFORM_ENTROPY in mbedtls_config.h"
 #endif
@@ -153,6 +153,27 @@ static int sysctl_arnd_wrapper(unsigned char *buf, size_t buflen)
 #endif /* KERN_ARND */
 #endif /* __FreeBSD__ || __NetBSD__ */
 
+/*
+ * vitasdk provides getentropy(), with 256b max per call.
+ */
+#if defined(__vita__)
+int getentropy(void *, size_t); // hidden behind __BSD_VISIBLE
+
+static int vita_getentropy_wrapper(unsigned char *buf, size_t buflen)
+{
+    size_t len;
+
+    while (buflen > 0) {
+        len = buflen > 256 ? 256 : buflen;
+        if (getentropy(buf, len) == -1)
+            return -1;
+        buflen -= len;
+        buf += len;
+    }
+    return 0;
+}
+#endif /* __vita__ */
+
 #include <stdio.h>
 
 int mbedtls_platform_entropy_poll(void *data,
@@ -184,6 +205,14 @@ int mbedtls_platform_entropy_poll(void *data,
     }
     *olen = len;
     return 0;
+#elif defined(__vita__)
+	((void) file);
+	((void) read_len);
+	if (vita_getentropy_wrapper(output, len) == -1) {
+		return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
+	}
+	*olen = len;
+	return 0;
 #else
 
     *olen = 0;
diff --git a/library/net_sockets.c b/library/net_sockets.c
index e63d08b..c88acd3 100644
--- a/library/net_sockets.c
+++ b/library/net_sockets.c
@@ -33,7 +33,7 @@
 
 #if !defined(unix) && !defined(__unix__) && !defined(__unix) && \
     !defined(__APPLE__) && !defined(_WIN32) && !defined(__QNXNTO__) && \
-    !defined(__HAIKU__) && !defined(__midipix__)
+    !defined(__HAIKU__) && !defined(__midipix__) && !defined(__vita__)
 #error "This module only works on Unix and Windows, see MBEDTLS_NET_C in mbedtls_config.h"
 #endif
 
diff --git a/library/timing.c b/library/timing.c
index 6852033..06d7cad 100644
--- a/library/timing.c
+++ b/library/timing.c
@@ -27,7 +27,7 @@
 
 #if !defined(unix) && !defined(__unix__) && !defined(__unix) && \
     !defined(__APPLE__) && !defined(_WIN32) && !defined(__QNXNTO__) && \
-    !defined(__HAIKU__) && !defined(__midipix__)
+    !defined(__HAIKU__) && !defined(__midipix__) && !defined(__vita__)
 #error "This module only works on Unix and Windows, see MBEDTLS_TIMING_C in mbedtls_config.h"
 #endif
 
